# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:20:03+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ARN(
    RootModel[
        constr(
            pattern=r'^arn:aws:[A-Za-z0-9][A-za-z0-9_/.-]{0,62}:[A-za-z0-9_/.-]{0,63}:[A-za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-za-z0-9_/.-]{0,127}$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws:[A-Za-z0-9][A-za-z0-9_/.-]{0,62}:[A-za-z0-9_/.-]{0,63}:[A-za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-za-z0-9_/.-]{0,127}$'
    )


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccessPropertyValue(Enum):
    ALLOW = 'ALLOW'
    DENY = 'DENY'


class AddInName(RootModel[constr(pattern=r'^.*$', min_length=1, max_length=64)]):
    root: constr(pattern=r'^.*$', min_length=1, max_length=64)


class AddInUrl(
    RootModel[constr(pattern=r'^(http|https)\://\S+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'^(http|https)\://\S+', min_length=1, max_length=1024)


class Alias(RootModel[str]):
    root: str


class AmazonUuid(
    RootModel[
        constr(
            pattern=r'[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}',
        min_length=36,
        max_length=36,
    )


class Application(Enum):
    Microsoft_Office_2016 = 'Microsoft_Office_2016'
    Microsoft_Office_2019 = 'Microsoft_Office_2019'


class ApplicationList(RootModel[List[Application]]):
    root: List[Application] = Field(..., max_length=5, min_length=1)


class AssociateIpGroupsResult(BaseModel):
    pass


class AssociationStatus(Enum):
    NOT_ASSOCIATED = 'NOT_ASSOCIATED'
    ASSOCIATED_WITH_OWNER_ACCOUNT = 'ASSOCIATED_WITH_OWNER_ACCOUNT'
    ASSOCIATED_WITH_SHARED_ACCOUNT = 'ASSOCIATED_WITH_SHARED_ACCOUNT'
    PENDING_ASSOCIATION = 'PENDING_ASSOCIATION'
    PENDING_DISASSOCIATION = 'PENDING_DISASSOCIATION'


class AuthorizeIpRulesResult(BaseModel):
    pass


class AwsAccount(RootModel[constr(pattern=r'^\d{12}$')]):
    root: constr(pattern=r'^\d{12}$')


class BooleanObject(RootModel[bool]):
    root: bool


class BundleId(RootModel[constr(pattern=r'^wsb-[0-9a-z]{8,63}$')]):
    root: constr(pattern=r'^wsb-[0-9a-z]{8,63}$')


class BundleIdList(RootModel[List[BundleId]]):
    root: List[BundleId] = Field(..., max_length=25, min_length=1)


class BundleOwner(RootModel[str]):
    root: str


class BundleType(Enum):
    REGULAR = 'REGULAR'
    STANDBY = 'STANDBY'


class CertificateAuthorityArn(
    RootModel[
        constr(
            pattern=r'arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]*:[\w+=,.@-]+(/[\w+=,.@-]+)*',
            min_length=5,
            max_length=200,
        )
    ]
):
    root: constr(
        pattern=r'arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]*:[\w+=,.@-]+(/[\w+=,.@-]+)*',
        min_length=5,
        max_length=200,
    )


class CertificateBasedAuthStatusEnum(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class ClientDeviceType(Enum):
    DeviceTypeWindows = 'DeviceTypeWindows'
    DeviceTypeOsx = 'DeviceTypeOsx'
    DeviceTypeAndroid = 'DeviceTypeAndroid'
    DeviceTypeIos = 'DeviceTypeIos'
    DeviceTypeLinux = 'DeviceTypeLinux'
    DeviceTypeWeb = 'DeviceTypeWeb'


class ClientDeviceTypeList(RootModel[List[ClientDeviceType]]):
    root: List[ClientDeviceType] = Field(..., max_length=6, min_length=1)


class ClientEmail(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$',
            min_length=6,
            max_length=64,
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$',
        min_length=6,
        max_length=64,
    )


class ClientLocale(
    RootModel[constr(pattern=r'^[a-z]{2}_[A-Z]{2}$', min_length=5, max_length=5)]
):
    root: constr(pattern=r'^[a-z]{2}_[A-Z]{2}$', min_length=5, max_length=5)


class ClientLoginMessage(
    RootModel[constr(pattern=r'^.*$', min_length=0, max_length=2000)]
):
    root: constr(pattern=r'^.*$', min_length=0, max_length=2000)


class ClientUrl(
    RootModel[constr(pattern=r'^(http|https)\://\S+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^(http|https)\://\S+', min_length=1, max_length=200)


class Compute(Enum):
    VALUE = 'VALUE'
    STANDARD = 'STANDARD'
    PERFORMANCE = 'PERFORMANCE'
    POWER = 'POWER'
    GRAPHICS = 'GRAPHICS'
    POWERPRO = 'POWERPRO'
    GRAPHICSPRO = 'GRAPHICSPRO'
    GRAPHICS_G4DN = 'GRAPHICS_G4DN'
    GRAPHICSPRO_G4DN = 'GRAPHICSPRO_G4DN'


class ComputeType(BaseModel):
    Name: Optional[Compute] = None


class ComputerName(RootModel[str]):
    root: str


class ConnectionAliasId(
    RootModel[constr(pattern=r'^wsca-[0-9a-z]{8,63}$', min_length=13, max_length=68)]
):
    root: constr(pattern=r'^wsca-[0-9a-z]{8,63}$', min_length=13, max_length=68)


class ConnectionAliasIdList(RootModel[List[ConnectionAliasId]]):
    root: List[ConnectionAliasId] = Field(..., max_length=25, min_length=1)


class ConnectionAliasPermission(BaseModel):
    AllowAssociation: BooleanObject
    SharedAccountId: AwsAccount


class ConnectionAliasPermissions(RootModel[List[ConnectionAliasPermission]]):
    root: List[ConnectionAliasPermission] = Field(..., max_length=25, min_length=1)


class ConnectionAliasState(Enum):
    CREATING = 'CREATING'
    CREATED = 'CREATED'
    DELETING = 'DELETING'


class ConnectionIdentifier(
    RootModel[constr(pattern=r'^[a-zA-Z0-9]+$', min_length=1, max_length=20)]
):
    root: constr(pattern=r'^[a-zA-Z0-9]+$', min_length=1, max_length=20)


class ConnectionState(Enum):
    CONNECTED = 'CONNECTED'
    DISCONNECTED = 'DISCONNECTED'
    UNKNOWN = 'UNKNOWN'


class ConnectionString(
    RootModel[constr(pattern=r'^[.0-9a-zA-Z\-]{1,255}$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[.0-9a-zA-Z\-]{1,255}$', min_length=1, max_length=255)


class CreateConnectClientAddInResult(BaseModel):
    AddInId: Optional[AmazonUuid] = None


class CreateConnectionAliasResult(BaseModel):
    AliasId: Optional[ConnectionAliasId] = None


class CreateTagsResult(BaseModel):
    pass


class DedicatedTenancyManagementCidrRange(
    RootModel[
        constr(
            pattern=r'(^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.0\.0)(\/(16$))$'
        )
    ]
):
    root: constr(
        pattern=r'(^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.0\.0)(\/(16$))$'
    )


class DedicatedTenancyModificationStateEnum(Enum):
    PENDING = 'PENDING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class DedicatedTenancySupportEnum(Enum):
    ENABLED = 'ENABLED'


class DedicatedTenancySupportResultEnum(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class DefaultLogo(RootModel[constr(min_length=1, max_length=1500000)]):
    root: constr(min_length=1, max_length=1500000)


class DefaultOu(RootModel[str]):
    root: str


class DeletableCertificateBasedAuthProperty(Enum):
    CERTIFICATE_BASED_AUTH_PROPERTIES_CERTIFICATE_AUTHORITY_ARN = (
        'CERTIFICATE_BASED_AUTH_PROPERTIES_CERTIFICATE_AUTHORITY_ARN'
    )


class DeletableSamlProperty(Enum):
    SAML_PROPERTIES_USER_ACCESS_URL = 'SAML_PROPERTIES_USER_ACCESS_URL'
    SAML_PROPERTIES_RELAY_STATE_PARAMETER_NAME = (
        'SAML_PROPERTIES_RELAY_STATE_PARAMETER_NAME'
    )


class DeleteClientBrandingResult(BaseModel):
    pass


class DeleteConnectClientAddInResult(BaseModel):
    pass


class DeleteConnectionAliasRequest(BaseModel):
    AliasId: ConnectionAliasId


class DeleteConnectionAliasResult(BaseModel):
    pass


class DeleteIpGroupResult(BaseModel):
    pass


class DeleteTagsResult(BaseModel):
    pass


class DeleteWorkspaceBundleRequest(BaseModel):
    BundleId_1: Optional[BundleId] = Field(None, alias='BundleId')


class DeleteWorkspaceBundleResult(BaseModel):
    pass


class DeleteWorkspaceImageResult(BaseModel):
    pass


class DeregisterWorkspaceDirectoryResult(BaseModel):
    pass


class DescribeAccountRequest(BaseModel):
    pass


class DescribeAccountResult(BaseModel):
    DedicatedTenancyManagementCidrRange_1: Optional[
        DedicatedTenancyManagementCidrRange
    ] = Field(None, alias='DedicatedTenancyManagementCidrRange')
    DedicatedTenancySupport: Optional[DedicatedTenancySupportResultEnum] = None


class Description(RootModel[str]):
    root: str


class DirectoryId(
    RootModel[constr(pattern=r'^d-[0-9a-f]{8,63}$', min_length=10, max_length=65)]
):
    root: constr(pattern=r'^d-[0-9a-f]{8,63}$', min_length=10, max_length=65)


class DirectoryIdList(RootModel[List[DirectoryId]]):
    root: List[DirectoryId] = Field(..., max_length=25, min_length=1)


class DirectoryName(RootModel[str]):
    root: str


class DisassociateConnectionAliasRequest(BaseModel):
    AliasId: ConnectionAliasId


class DisassociateConnectionAliasResult(BaseModel):
    pass


class DisassociateIpGroupsResult(BaseModel):
    pass


class Ec2ImageId(RootModel[constr(pattern=r'^ami\-([a-f0-9]{8}|[a-f0-9]{17})$')]):
    root: constr(pattern=r'^ami\-([a-f0-9]{8}|[a-f0-9]{17})$')


class ErrorType(RootModel[str]):
    root: str


class ImagePermission(BaseModel):
    SharedAccountId: Optional[AwsAccount] = None


class ImagePermissions(RootModel[List[ImagePermission]]):
    root: List[ImagePermission]


class ImageType(Enum):
    OWNED = 'OWNED'
    SHARED = 'SHARED'


class InvalidParameterValuesException(RootModel[Any]):
    root: Any


class InvalidResourceStateException(RootModel[Any]):
    root: Any


class Ios2XLogo(RootModel[constr(min_length=1, max_length=1770000)]):
    root: constr(min_length=1, max_length=1770000)


class Ios3XLogo(RootModel[constr(min_length=1, max_length=1770000)]):
    root: constr(min_length=1, max_length=1770000)


class IosLogo(RootModel[constr(min_length=1, max_length=447000)]):
    root: constr(min_length=1, max_length=447000)


class IpAddress(RootModel[str]):
    root: str


class IpGroupDesc(RootModel[str]):
    root: str


class IpGroupId(RootModel[constr(pattern=r'wsipg-[0-9a-z]{8,63}$')]):
    root: constr(pattern=r'wsipg-[0-9a-z]{8,63}$')


class IpGroupIdList(RootModel[List[IpGroupId]]):
    root: List[IpGroupId]


class IpGroupName(RootModel[str]):
    root: str


class IpRule(RootModel[str]):
    root: str


class IpRuleDesc(RootModel[str]):
    root: str


class IpRuleItem(BaseModel):
    ipRule: Optional[IpRule] = None
    ruleDesc: Optional[IpRuleDesc] = None


class IpRuleList(RootModel[List[IpRuleItem]]):
    root: List[IpRuleItem]


class Limit(RootModel[conint(ge=1, le=25)]):
    root: conint(ge=1, le=25)


class LogUploadEnum(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class LoginMessage(RootModel[Optional[Dict[str, ClientLoginMessage]]]):
    root: Optional[Dict[str, ClientLoginMessage]] = None


class ManagementCidrRangeConstraint(
    RootModel[
        constr(
            pattern=r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'
        )
    ]
):
    root: constr(
        pattern=r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'
    )


class ManagementCidrRangeMaxResults(RootModel[conint(ge=1, le=5)]):
    root: conint(ge=1, le=5)


class ModificationResourceEnum(Enum):
    ROOT_VOLUME = 'ROOT_VOLUME'
    USER_VOLUME = 'USER_VOLUME'
    COMPUTE_TYPE = 'COMPUTE_TYPE'


class ModificationStateEnum(Enum):
    UPDATE_INITIATED = 'UPDATE_INITIATED'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'


class ModifyAccountRequest(BaseModel):
    DedicatedTenancyManagementCidrRange_1: Optional[
        DedicatedTenancyManagementCidrRange
    ] = Field(None, alias='DedicatedTenancyManagementCidrRange')
    DedicatedTenancySupport: Optional[DedicatedTenancySupportEnum] = None


class ModifyAccountResult(BaseModel):
    pass


class ModifyCertificateBasedAuthPropertiesResult(BaseModel):
    pass


class ModifyClientPropertiesResult(BaseModel):
    pass


class ModifySamlPropertiesResult(BaseModel):
    pass


class ModifySelfservicePermissionsResult(BaseModel):
    pass


class ModifyWorkspaceAccessPropertiesResult(BaseModel):
    pass


class ModifyWorkspaceCreationPropertiesResult(BaseModel):
    pass


class ModifyWorkspacePropertiesResult(BaseModel):
    pass


class ModifyWorkspaceStateResult(BaseModel):
    pass


class NonEmptyString(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class OperatingSystemType(Enum):
    WINDOWS = 'WINDOWS'
    LINUX = 'LINUX'


class OperationInProgressException(RootModel[Any]):
    root: Any


class OperationNotSupportedException(RootModel[Any]):
    root: Any


class PaginationToken(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class Protocol(Enum):
    PCOIP = 'PCOIP'
    WSP = 'WSP'


class ProtocolList(RootModel[List[Protocol]]):
    root: List[Protocol]


class ReconnectEnum(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class Region(
    RootModel[constr(pattern=r'^[-0-9a-z]{1,31}$', min_length=1, max_length=31)]
):
    root: constr(pattern=r'^[-0-9a-z]{1,31}$', min_length=1, max_length=31)


class RegisterWorkspaceDirectoryResult(BaseModel):
    pass


class RegistrationCode(RootModel[constr(min_length=1, max_length=20)]):
    root: constr(min_length=1, max_length=20)


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceAssociatedException(RootModel[Any]):
    root: Any


class ResourceCreationFailedException(RootModel[Any]):
    root: Any


class ResourceIdList(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString] = Field(..., max_length=25, min_length=1)


class ResourceLimitExceededException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceUnavailableException(RootModel[Any]):
    root: Any


class RestoreWorkspaceResult(BaseModel):
    pass


class RevokeIpRulesResult(BaseModel):
    pass


class RootStorage(BaseModel):
    Capacity: Optional[NonEmptyString] = None


class RootVolumeSizeGib(RootModel[int]):
    root: int


class RunningMode(Enum):
    AUTO_STOP = 'AUTO_STOP'
    ALWAYS_ON = 'ALWAYS_ON'
    MANUAL = 'MANUAL'


class RunningModeAutoStopTimeoutInMinutes(RootModel[int]):
    root: int


class SamlStatusEnum(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'
    ENABLED_WITH_DIRECTORY_LOGIN_FALLBACK = 'ENABLED_WITH_DIRECTORY_LOGIN_FALLBACK'


class SamlUserAccessUrl(
    RootModel[constr(pattern=r'^(http|https)\://\S+$', min_length=8, max_length=200)]
):
    root: constr(pattern=r'^(http|https)\://\S+$', min_length=8, max_length=200)


class SecurityGroupId(
    RootModel[
        constr(
            pattern=r'^(sg-([0-9a-f]{8}|[0-9a-f]{17}))$', min_length=11, max_length=20
        )
    ]
):
    root: constr(
        pattern=r'^(sg-([0-9a-f]{8}|[0-9a-f]{17}))$', min_length=11, max_length=20
    )


class SelfservicePermissions(BaseModel):
    ChangeComputeType: Optional[ReconnectEnum] = None
    IncreaseVolumeSize: Optional[ReconnectEnum] = None
    RebuildWorkspace: Optional[ReconnectEnum] = None
    RestartWorkspace: Optional[ReconnectEnum] = None
    SwitchRunningMode: Optional[ReconnectEnum] = None


class StandbyWorkspaceRelationshipType(Enum):
    PRIMARY = 'PRIMARY'
    STANDBY = 'STANDBY'


class SubnetId(
    RootModel[
        constr(
            pattern=r'^(subnet-([0-9a-f]{8}|[0-9a-f]{17}))$',
            min_length=15,
            max_length=24,
        )
    ]
):
    root: constr(
        pattern=r'^(subnet-([0-9a-f]{8}|[0-9a-f]{17}))$', min_length=15, max_length=24
    )


class SubnetIds(RootModel[List[SubnetId]]):
    root: List[SubnetId] = Field(..., max_length=2)


class TagKey(RootModel[constr(min_length=1, max_length=127)]):
    root: constr(min_length=1, max_length=127)


class TagKeyList(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString]


class TagValue(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class TargetWorkspaceState(Enum):
    AVAILABLE = 'AVAILABLE'
    ADMIN_MAINTENANCE = 'ADMIN_MAINTENANCE'


class Tenancy(Enum):
    DEDICATED = 'DEDICATED'
    SHARED = 'SHARED'


class Timestamp(RootModel[datetime]):
    root: datetime


class UnsupportedNetworkConfigurationException(RootModel[Any]):
    root: Any


class UnsupportedWorkspaceConfigurationException(RootModel[Any]):
    root: Any


class UpdateConnectClientAddInRequest(BaseModel):
    AddInId: AmazonUuid
    Name: Optional[AddInName] = None
    ResourceId: DirectoryId
    URL: Optional[AddInUrl] = None


class UpdateConnectClientAddInResult(BaseModel):
    pass


class UpdateConnectionAliasPermissionRequest(BaseModel):
    AliasId: ConnectionAliasId
    ConnectionAliasPermission_1: ConnectionAliasPermission = Field(
        ..., alias='ConnectionAliasPermission'
    )


class UpdateConnectionAliasPermissionResult(BaseModel):
    pass


class UpdateDescription(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_./() -]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_./() -]+$', min_length=1, max_length=255)


class UpdateResult(BaseModel):
    Description: Optional[UpdateDescription] = None
    UpdateAvailable: Optional[BooleanObject] = None


class UpdateRulesOfIpGroupRequest(BaseModel):
    GroupId: IpGroupId
    UserRules: IpRuleList


class UpdateRulesOfIpGroupResult(BaseModel):
    pass


class UpdateWorkspaceBundleResult(BaseModel):
    pass


class UpdateWorkspaceImagePermissionResult(BaseModel):
    pass


class UserName(RootModel[constr(min_length=1, max_length=63)]):
    root: constr(min_length=1, max_length=63)


class UserStorage(BaseModel):
    Capacity: Optional[NonEmptyString] = None


class UserVolumeSizeGib(RootModel[int]):
    root: int


class VolumeEncryptionKey(RootModel[str]):
    root: str


class WorkspaceAccessProperties(BaseModel):
    DeviceTypeAndroid: Optional[AccessPropertyValue] = None
    DeviceTypeChromeOs: Optional[AccessPropertyValue] = None
    DeviceTypeIos: Optional[AccessPropertyValue] = None
    DeviceTypeLinux: Optional[AccessPropertyValue] = None
    DeviceTypeOsx: Optional[AccessPropertyValue] = None
    DeviceTypeWeb: Optional[AccessPropertyValue] = None
    DeviceTypeWindows: Optional[AccessPropertyValue] = None
    DeviceTypeZeroClient: Optional[AccessPropertyValue] = None


class WorkspaceBundleDescription(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_./() -]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_./() -]+$', min_length=1, max_length=255)


class WorkspaceBundleName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_./()\\-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_./()\\-]+$', min_length=1, max_length=64)


class WorkspaceBundleState(Enum):
    AVAILABLE = 'AVAILABLE'
    PENDING = 'PENDING'
    ERROR = 'ERROR'


class WorkspaceCreationProperties(BaseModel):
    CustomSecurityGroupId: Optional[SecurityGroupId] = None
    DefaultOu_1: Optional[DefaultOu] = Field(None, alias='DefaultOu')
    EnableInternetAccess: Optional[BooleanObject] = None
    EnableMaintenanceMode: Optional[BooleanObject] = None
    EnableWorkDocs: Optional[BooleanObject] = None
    UserEnabledAsLocalAdministrator: Optional[BooleanObject] = None


class WorkspaceDirectoryState(Enum):
    REGISTERING = 'REGISTERING'
    REGISTERED = 'REGISTERED'
    DEREGISTERING = 'DEREGISTERING'
    DEREGISTERED = 'DEREGISTERED'
    ERROR = 'ERROR'


class WorkspaceDirectoryType(Enum):
    SIMPLE_AD = 'SIMPLE_AD'
    AD_CONNECTOR = 'AD_CONNECTOR'


class WorkspaceErrorCode(RootModel[str]):
    root: str


class WorkspaceId(RootModel[constr(pattern=r'^ws-[0-9a-z]{8,63}$')]):
    root: constr(pattern=r'^ws-[0-9a-z]{8,63}$')


class WorkspaceIdList(RootModel[List[WorkspaceId]]):
    root: List[WorkspaceId] = Field(..., max_length=25, min_length=1)


class WorkspaceImageDescription(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_./() -]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_./() -]+$', min_length=1, max_length=256)


class WorkspaceImageErrorCode(RootModel[str]):
    root: str


class WorkspaceImageId(RootModel[constr(pattern=r'wsi-[0-9a-z]{9,63}$')]):
    root: constr(pattern=r'wsi-[0-9a-z]{9,63}$')


class WorkspaceImageIdList(RootModel[List[WorkspaceImageId]]):
    root: List[WorkspaceImageId] = Field(..., max_length=25, min_length=1)


class WorkspaceImageIngestionProcess(Enum):
    BYOL_REGULAR = 'BYOL_REGULAR'
    BYOL_GRAPHICS = 'BYOL_GRAPHICS'
    BYOL_GRAPHICSPRO = 'BYOL_GRAPHICSPRO'
    BYOL_GRAPHICS_G4DN = 'BYOL_GRAPHICS_G4DN'
    BYOL_REGULAR_WSP = 'BYOL_REGULAR_WSP'
    BYOL_REGULAR_BYOP = 'BYOL_REGULAR_BYOP'
    BYOL_GRAPHICS_G4DN_BYOP = 'BYOL_GRAPHICS_G4DN_BYOP'


class WorkspaceImageName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_./()\\-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_./()\\-]+$', min_length=1, max_length=64)


class WorkspaceImageRequiredTenancy(Enum):
    DEFAULT = 'DEFAULT'
    DEDICATED = 'DEDICATED'


class WorkspaceImageState(Enum):
    AVAILABLE = 'AVAILABLE'
    PENDING = 'PENDING'
    ERROR = 'ERROR'


class WorkspaceProperties(BaseModel):
    ComputeTypeName: Optional[Compute] = None
    Protocols: Optional[ProtocolList] = None
    RootVolumeSizeGib_1: Optional[RootVolumeSizeGib] = Field(
        None, alias='RootVolumeSizeGib'
    )
    RunningMode_1: Optional[RunningMode] = Field(None, alias='RunningMode')
    RunningModeAutoStopTimeoutInMinutes_1: Optional[
        RunningModeAutoStopTimeoutInMinutes
    ] = Field(None, alias='RunningModeAutoStopTimeoutInMinutes')
    UserVolumeSizeGib_1: Optional[UserVolumeSizeGib] = Field(
        None, alias='UserVolumeSizeGib'
    )


class WorkspaceState(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    IMPAIRED = 'IMPAIRED'
    UNHEALTHY = 'UNHEALTHY'
    REBOOTING = 'REBOOTING'
    STARTING = 'STARTING'
    REBUILDING = 'REBUILDING'
    RESTORING = 'RESTORING'
    MAINTENANCE = 'MAINTENANCE'
    ADMIN_MAINTENANCE = 'ADMIN_MAINTENANCE'
    TERMINATING = 'TERMINATING'
    TERMINATED = 'TERMINATED'
    SUSPENDED = 'SUSPENDED'
    UPDATING = 'UPDATING'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    ERROR = 'ERROR'


class WorkspacesDefaultRoleNotFoundException(RootModel[Any]):
    root: Any


class WorkspacesIpGroup(BaseModel):
    groupDesc: Optional[IpGroupDesc] = None
    groupId: Optional[IpGroupId] = None
    groupName: Optional[IpGroupName] = None
    userRules: Optional[IpRuleList] = None


class WorkspacesIpGroupsList(RootModel[List[WorkspacesIpGroup]]):
    root: List[WorkspacesIpGroup]


class XAmzTarget(Enum):
    WorkspacesService_AssociateConnectionAlias = (
        'WorkspacesService.AssociateConnectionAlias'
    )


class XAmzTarget1(Enum):
    WorkspacesService_AssociateIpGroups = 'WorkspacesService.AssociateIpGroups'


class XAmzTarget2(Enum):
    WorkspacesService_AuthorizeIpRules = 'WorkspacesService.AuthorizeIpRules'


class XAmzTarget3(Enum):
    WorkspacesService_CopyWorkspaceImage = 'WorkspacesService.CopyWorkspaceImage'


class XAmzTarget4(Enum):
    WorkspacesService_CreateConnectClientAddIn = (
        'WorkspacesService.CreateConnectClientAddIn'
    )


class XAmzTarget5(Enum):
    WorkspacesService_CreateConnectionAlias = 'WorkspacesService.CreateConnectionAlias'


class XAmzTarget6(Enum):
    WorkspacesService_CreateIpGroup = 'WorkspacesService.CreateIpGroup'


class XAmzTarget7(Enum):
    WorkspacesService_CreateStandbyWorkspaces = (
        'WorkspacesService.CreateStandbyWorkspaces'
    )


class XAmzTarget8(Enum):
    WorkspacesService_CreateTags = 'WorkspacesService.CreateTags'


class XAmzTarget9(Enum):
    WorkspacesService_CreateUpdatedWorkspaceImage = (
        'WorkspacesService.CreateUpdatedWorkspaceImage'
    )


class XAmzTarget10(Enum):
    WorkspacesService_CreateWorkspaceBundle = 'WorkspacesService.CreateWorkspaceBundle'


class XAmzTarget11(Enum):
    WorkspacesService_CreateWorkspaceImage = 'WorkspacesService.CreateWorkspaceImage'


class XAmzTarget12(Enum):
    WorkspacesService_CreateWorkspaces = 'WorkspacesService.CreateWorkspaces'


class XAmzTarget13(Enum):
    WorkspacesService_DeleteClientBranding = 'WorkspacesService.DeleteClientBranding'


class XAmzTarget14(Enum):
    WorkspacesService_DeleteConnectClientAddIn = (
        'WorkspacesService.DeleteConnectClientAddIn'
    )


class XAmzTarget15(Enum):
    WorkspacesService_DeleteConnectionAlias = 'WorkspacesService.DeleteConnectionAlias'


class XAmzTarget16(Enum):
    WorkspacesService_DeleteIpGroup = 'WorkspacesService.DeleteIpGroup'


class XAmzTarget17(Enum):
    WorkspacesService_DeleteTags = 'WorkspacesService.DeleteTags'


class XAmzTarget18(Enum):
    WorkspacesService_DeleteWorkspaceBundle = 'WorkspacesService.DeleteWorkspaceBundle'


class XAmzTarget19(Enum):
    WorkspacesService_DeleteWorkspaceImage = 'WorkspacesService.DeleteWorkspaceImage'


class XAmzTarget20(Enum):
    WorkspacesService_DeregisterWorkspaceDirectory = (
        'WorkspacesService.DeregisterWorkspaceDirectory'
    )


class XAmzTarget21(Enum):
    WorkspacesService_DescribeAccount = 'WorkspacesService.DescribeAccount'


class XAmzTarget22(Enum):
    WorkspacesService_DescribeAccountModifications = (
        'WorkspacesService.DescribeAccountModifications'
    )


class XAmzTarget23(Enum):
    WorkspacesService_DescribeClientBranding = (
        'WorkspacesService.DescribeClientBranding'
    )


class XAmzTarget24(Enum):
    WorkspacesService_DescribeClientProperties = (
        'WorkspacesService.DescribeClientProperties'
    )


class XAmzTarget25(Enum):
    WorkspacesService_DescribeConnectClientAddIns = (
        'WorkspacesService.DescribeConnectClientAddIns'
    )


class XAmzTarget26(Enum):
    WorkspacesService_DescribeConnectionAliasPermissions = (
        'WorkspacesService.DescribeConnectionAliasPermissions'
    )


class XAmzTarget27(Enum):
    WorkspacesService_DescribeConnectionAliases = (
        'WorkspacesService.DescribeConnectionAliases'
    )


class XAmzTarget28(Enum):
    WorkspacesService_DescribeIpGroups = 'WorkspacesService.DescribeIpGroups'


class XAmzTarget29(Enum):
    WorkspacesService_DescribeTags = 'WorkspacesService.DescribeTags'


class XAmzTarget30(Enum):
    WorkspacesService_DescribeWorkspaceBundles = (
        'WorkspacesService.DescribeWorkspaceBundles'
    )


class XAmzTarget31(Enum):
    WorkspacesService_DescribeWorkspaceDirectories = (
        'WorkspacesService.DescribeWorkspaceDirectories'
    )


class XAmzTarget32(Enum):
    WorkspacesService_DescribeWorkspaceImagePermissions = (
        'WorkspacesService.DescribeWorkspaceImagePermissions'
    )


class XAmzTarget33(Enum):
    WorkspacesService_DescribeWorkspaceImages = (
        'WorkspacesService.DescribeWorkspaceImages'
    )


class XAmzTarget34(Enum):
    WorkspacesService_DescribeWorkspaceSnapshots = (
        'WorkspacesService.DescribeWorkspaceSnapshots'
    )


class XAmzTarget35(Enum):
    WorkspacesService_DescribeWorkspaces = 'WorkspacesService.DescribeWorkspaces'


class XAmzTarget36(Enum):
    WorkspacesService_DescribeWorkspacesConnectionStatus = (
        'WorkspacesService.DescribeWorkspacesConnectionStatus'
    )


class XAmzTarget37(Enum):
    WorkspacesService_DisassociateConnectionAlias = (
        'WorkspacesService.DisassociateConnectionAlias'
    )


class XAmzTarget38(Enum):
    WorkspacesService_DisassociateIpGroups = 'WorkspacesService.DisassociateIpGroups'


class XAmzTarget39(Enum):
    WorkspacesService_ImportClientBranding = 'WorkspacesService.ImportClientBranding'


class XAmzTarget40(Enum):
    WorkspacesService_ImportWorkspaceImage = 'WorkspacesService.ImportWorkspaceImage'


class XAmzTarget41(Enum):
    WorkspacesService_ListAvailableManagementCidrRanges = (
        'WorkspacesService.ListAvailableManagementCidrRanges'
    )


class XAmzTarget42(Enum):
    WorkspacesService_MigrateWorkspace = 'WorkspacesService.MigrateWorkspace'


class XAmzTarget43(Enum):
    WorkspacesService_ModifyAccount = 'WorkspacesService.ModifyAccount'


class XAmzTarget44(Enum):
    WorkspacesService_ModifyCertificateBasedAuthProperties = (
        'WorkspacesService.ModifyCertificateBasedAuthProperties'
    )


class XAmzTarget45(Enum):
    WorkspacesService_ModifyClientProperties = (
        'WorkspacesService.ModifyClientProperties'
    )


class XAmzTarget46(Enum):
    WorkspacesService_ModifySamlProperties = 'WorkspacesService.ModifySamlProperties'


class XAmzTarget47(Enum):
    WorkspacesService_ModifySelfservicePermissions = (
        'WorkspacesService.ModifySelfservicePermissions'
    )


class XAmzTarget48(Enum):
    WorkspacesService_ModifyWorkspaceAccessProperties = (
        'WorkspacesService.ModifyWorkspaceAccessProperties'
    )


class XAmzTarget49(Enum):
    WorkspacesService_ModifyWorkspaceCreationProperties = (
        'WorkspacesService.ModifyWorkspaceCreationProperties'
    )


class XAmzTarget50(Enum):
    WorkspacesService_ModifyWorkspaceProperties = (
        'WorkspacesService.ModifyWorkspaceProperties'
    )


class XAmzTarget51(Enum):
    WorkspacesService_ModifyWorkspaceState = 'WorkspacesService.ModifyWorkspaceState'


class XAmzTarget52(Enum):
    WorkspacesService_RebootWorkspaces = 'WorkspacesService.RebootWorkspaces'


class XAmzTarget53(Enum):
    WorkspacesService_RebuildWorkspaces = 'WorkspacesService.RebuildWorkspaces'


class XAmzTarget54(Enum):
    WorkspacesService_RegisterWorkspaceDirectory = (
        'WorkspacesService.RegisterWorkspaceDirectory'
    )


class XAmzTarget55(Enum):
    WorkspacesService_RestoreWorkspace = 'WorkspacesService.RestoreWorkspace'


class XAmzTarget56(Enum):
    WorkspacesService_RevokeIpRules = 'WorkspacesService.RevokeIpRules'


class XAmzTarget57(Enum):
    WorkspacesService_StartWorkspaces = 'WorkspacesService.StartWorkspaces'


class XAmzTarget58(Enum):
    WorkspacesService_StopWorkspaces = 'WorkspacesService.StopWorkspaces'


class XAmzTarget59(Enum):
    WorkspacesService_TerminateWorkspaces = 'WorkspacesService.TerminateWorkspaces'


class XAmzTarget60(Enum):
    WorkspacesService_UpdateConnectClientAddIn = (
        'WorkspacesService.UpdateConnectClientAddIn'
    )


class XAmzTarget61(Enum):
    WorkspacesService_UpdateConnectionAliasPermission = (
        'WorkspacesService.UpdateConnectionAliasPermission'
    )


class XAmzTarget62(Enum):
    WorkspacesService_UpdateRulesOfIpGroup = 'WorkspacesService.UpdateRulesOfIpGroup'


class XAmzTarget63(Enum):
    WorkspacesService_UpdateWorkspaceBundle = 'WorkspacesService.UpdateWorkspaceBundle'


class XAmzTarget64(Enum):
    WorkspacesService_UpdateWorkspaceImagePermission = (
        'WorkspacesService.UpdateWorkspaceImagePermission'
    )


class AccountModification(BaseModel):
    DedicatedTenancyManagementCidrRange_1: Optional[
        DedicatedTenancyManagementCidrRange
    ] = Field(None, alias='DedicatedTenancyManagementCidrRange')
    DedicatedTenancySupport: Optional[DedicatedTenancySupportResultEnum] = None
    ErrorCode: Optional[WorkspaceErrorCode] = None
    ErrorMessage: Optional[Description] = None
    ModificationState: Optional[DedicatedTenancyModificationStateEnum] = None
    StartTime: Optional[Timestamp] = None


class AccountModificationList(RootModel[List[AccountModification]]):
    root: List[AccountModification]


class AssociateConnectionAliasRequest(BaseModel):
    AliasId: ConnectionAliasId
    ResourceId: NonEmptyString


class AssociateConnectionAliasResult(BaseModel):
    ConnectionIdentifier_1: Optional[ConnectionIdentifier] = Field(
        None, alias='ConnectionIdentifier'
    )


class AssociateIpGroupsRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    GroupIds: IpGroupIdList


class AuthorizeIpRulesRequest(BaseModel):
    GroupId: IpGroupId
    UserRules: IpRuleList


class CertificateBasedAuthProperties(BaseModel):
    CertificateAuthorityArn_1: Optional[CertificateAuthorityArn] = Field(
        None, alias='CertificateAuthorityArn'
    )
    Status: Optional[CertificateBasedAuthStatusEnum] = None


class ClientProperties(BaseModel):
    LogUploadEnabled: Optional[LogUploadEnum] = None
    ReconnectEnabled: Optional[ReconnectEnum] = None


class ClientPropertiesResult(BaseModel):
    ClientProperties_1: Optional[ClientProperties] = Field(
        None, alias='ClientProperties'
    )
    ResourceId: Optional[NonEmptyString] = None


class ConnectClientAddIn(BaseModel):
    AddInId: Optional[AmazonUuid] = None
    Name: Optional[AddInName] = None
    ResourceId: Optional[DirectoryId] = None
    URL: Optional[AddInUrl] = None


class ConnectClientAddInList(RootModel[List[ConnectClientAddIn]]):
    root: List[ConnectClientAddIn]


class ConnectionAliasAssociation(BaseModel):
    AssociatedAccountId: Optional[AwsAccount] = None
    AssociationStatus_1: Optional[AssociationStatus] = Field(
        None, alias='AssociationStatus'
    )
    ConnectionIdentifier_1: Optional[ConnectionIdentifier] = Field(
        None, alias='ConnectionIdentifier'
    )
    ResourceId: Optional[NonEmptyString] = None


class ConnectionAliasAssociationList(RootModel[List[ConnectionAliasAssociation]]):
    root: List[ConnectionAliasAssociation] = Field(..., max_length=25, min_length=1)


class CopyWorkspaceImageResult(BaseModel):
    ImageId: Optional[WorkspaceImageId] = None


class CreateConnectClientAddInRequest(BaseModel):
    Name: AddInName
    ResourceId: DirectoryId
    URL: AddInUrl


class CreateIpGroupResult(BaseModel):
    GroupId: Optional[IpGroupId] = None


class CreateUpdatedWorkspaceImageResult(BaseModel):
    ImageId: Optional[WorkspaceImageId] = None


class DedicatedTenancyCidrRangeList(
    RootModel[List[DedicatedTenancyManagementCidrRange]]
):
    root: List[DedicatedTenancyManagementCidrRange]


class DefaultClientBrandingAttributes(BaseModel):
    ForgotPasswordLink: Optional[ClientUrl] = None
    LoginMessage_1: Optional[LoginMessage] = Field(None, alias='LoginMessage')
    LogoUrl: Optional[ClientUrl] = None
    SupportEmail: Optional[ClientEmail] = None
    SupportLink: Optional[ClientUrl] = None


class DefaultImportClientBrandingAttributes(BaseModel):
    ForgotPasswordLink: Optional[ClientUrl] = None
    LoginMessage_1: Optional[LoginMessage] = Field(None, alias='LoginMessage')
    Logo: Optional[DefaultLogo] = None
    SupportEmail: Optional[ClientEmail] = None
    SupportLink: Optional[ClientUrl] = None


class DefaultWorkspaceCreationProperties(BaseModel):
    CustomSecurityGroupId: Optional[SecurityGroupId] = None
    DefaultOu_1: Optional[DefaultOu] = Field(None, alias='DefaultOu')
    EnableInternetAccess: Optional[BooleanObject] = None
    EnableMaintenanceMode: Optional[BooleanObject] = None
    EnableWorkDocs: Optional[BooleanObject] = None
    UserEnabledAsLocalAdministrator: Optional[BooleanObject] = None


class DeletableCertificateBasedAuthPropertiesList(
    RootModel[List[DeletableCertificateBasedAuthProperty]]
):
    root: List[DeletableCertificateBasedAuthProperty]


class DeletableSamlPropertiesList(RootModel[List[DeletableSamlProperty]]):
    root: List[DeletableSamlProperty]


class DeleteClientBrandingRequest(BaseModel):
    Platforms: ClientDeviceTypeList
    ResourceId: DirectoryId


class DeleteConnectClientAddInRequest(BaseModel):
    AddInId: AmazonUuid
    ResourceId: DirectoryId


class DeleteIpGroupRequest(BaseModel):
    GroupId: IpGroupId


class DeleteTagsRequest(BaseModel):
    ResourceId: NonEmptyString
    TagKeys: TagKeyList


class DeleteWorkspaceImageRequest(BaseModel):
    ImageId: WorkspaceImageId


class DeregisterWorkspaceDirectoryRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')


class DescribeAccountModificationsRequest(BaseModel):
    NextToken: Optional[PaginationToken] = None


class DescribeAccountModificationsResult(BaseModel):
    AccountModifications: Optional[AccountModificationList] = None
    NextToken: Optional[PaginationToken] = None


class DescribeClientBrandingRequest(BaseModel):
    ResourceId: DirectoryId


class DescribeClientPropertiesRequest(BaseModel):
    ResourceIds: ResourceIdList


class DescribeConnectClientAddInsRequest(BaseModel):
    MaxResults: Optional[Limit] = None
    NextToken: Optional[PaginationToken] = None
    ResourceId: DirectoryId


class DescribeConnectClientAddInsResult(BaseModel):
    AddIns: Optional[ConnectClientAddInList] = None
    NextToken: Optional[PaginationToken] = None


class DescribeConnectionAliasPermissionsRequest(BaseModel):
    AliasId: ConnectionAliasId
    MaxResults: Optional[Limit] = None
    NextToken: Optional[PaginationToken] = None


class DescribeConnectionAliasPermissionsResult(BaseModel):
    AliasId: Optional[ConnectionAliasId] = None
    ConnectionAliasPermissions_1: Optional[ConnectionAliasPermissions] = Field(
        None, alias='ConnectionAliasPermissions'
    )
    NextToken: Optional[PaginationToken] = None


class DescribeConnectionAliasesRequest(BaseModel):
    AliasIds: Optional[ConnectionAliasIdList] = None
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken: Optional[PaginationToken] = None
    ResourceId: Optional[NonEmptyString] = None


class DescribeIpGroupsRequest(BaseModel):
    GroupIds: Optional[IpGroupIdList] = None
    MaxResults: Optional[Limit] = None
    NextToken: Optional[PaginationToken] = None


class DescribeIpGroupsResult(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Result: Optional[WorkspacesIpGroupsList] = None


class DescribeTagsRequest(BaseModel):
    ResourceId: NonEmptyString


class DescribeWorkspaceBundlesRequest(BaseModel):
    BundleIds: Optional[BundleIdList] = None
    NextToken: Optional[PaginationToken] = None
    Owner: Optional[BundleOwner] = None


class DescribeWorkspaceDirectoriesRequest(BaseModel):
    DirectoryIds: Optional[DirectoryIdList] = None
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken: Optional[PaginationToken] = None


class DescribeWorkspaceImagePermissionsRequest(BaseModel):
    ImageId: WorkspaceImageId
    MaxResults: Optional[Limit] = None
    NextToken: Optional[PaginationToken] = None


class DescribeWorkspaceImagePermissionsResult(BaseModel):
    ImageId: Optional[WorkspaceImageId] = None
    ImagePermissions_1: Optional[ImagePermissions] = Field(
        None, alias='ImagePermissions'
    )
    NextToken: Optional[PaginationToken] = None


class DescribeWorkspaceImagesRequest(BaseModel):
    ImageIds: Optional[WorkspaceImageIdList] = None
    ImageType_1: Optional[ImageType] = Field(None, alias='ImageType')
    MaxResults: Optional[Limit] = None
    NextToken: Optional[PaginationToken] = None


class DescribeWorkspaceSnapshotsRequest(BaseModel):
    WorkspaceId_1: WorkspaceId = Field(..., alias='WorkspaceId')


class DescribeWorkspacesConnectionStatusRequest(BaseModel):
    NextToken: Optional[PaginationToken] = None
    WorkspaceIds: Optional[WorkspaceIdList] = None


class DescribeWorkspacesRequest(BaseModel):
    BundleId_1: Optional[BundleId] = Field(None, alias='BundleId')
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken: Optional[PaginationToken] = None
    UserName_1: Optional[UserName] = Field(None, alias='UserName')
    WorkspaceIds: Optional[WorkspaceIdList] = None


class DisassociateIpGroupsRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    GroupIds: IpGroupIdList


class DnsIpAddresses(RootModel[List[IpAddress]]):
    root: List[IpAddress]


class FailedWorkspaceChangeRequest(BaseModel):
    ErrorCode: Optional[ErrorType] = None
    ErrorMessage: Optional[Description] = None
    WorkspaceId_1: Optional[WorkspaceId] = Field(None, alias='WorkspaceId')


class ImportWorkspaceImageResult(BaseModel):
    ImageId: Optional[WorkspaceImageId] = None


class IosClientBrandingAttributes(BaseModel):
    ForgotPasswordLink: Optional[ClientUrl] = None
    LoginMessage_1: Optional[LoginMessage] = Field(None, alias='LoginMessage')
    Logo2xUrl: Optional[ClientUrl] = None
    Logo3xUrl: Optional[ClientUrl] = None
    LogoUrl: Optional[ClientUrl] = None
    SupportEmail: Optional[ClientEmail] = None
    SupportLink: Optional[ClientUrl] = None


class IosImportClientBrandingAttributes(BaseModel):
    ForgotPasswordLink: Optional[ClientUrl] = None
    LoginMessage_1: Optional[LoginMessage] = Field(None, alias='LoginMessage')
    Logo: Optional[IosLogo] = None
    Logo2x: Optional[Ios2XLogo] = None
    Logo3x: Optional[Ios3XLogo] = None
    SupportEmail: Optional[ClientEmail] = None
    SupportLink: Optional[ClientUrl] = None


class IpRevokedRuleList(RootModel[List[IpRule]]):
    root: List[IpRule]


class ListAvailableManagementCidrRangesRequest(BaseModel):
    ManagementCidrRangeConstraint_1: ManagementCidrRangeConstraint = Field(
        ..., alias='ManagementCidrRangeConstraint'
    )
    MaxResults: Optional[ManagementCidrRangeMaxResults] = None
    NextToken: Optional[PaginationToken] = None


class ListAvailableManagementCidrRangesResult(BaseModel):
    ManagementCidrRanges: Optional[DedicatedTenancyCidrRangeList] = None
    NextToken: Optional[PaginationToken] = None


class MigrateWorkspaceRequest(BaseModel):
    BundleId_1: BundleId = Field(..., alias='BundleId')
    SourceWorkspaceId: WorkspaceId


class MigrateWorkspaceResult(BaseModel):
    SourceWorkspaceId: Optional[WorkspaceId] = None
    TargetWorkspaceId: Optional[WorkspaceId] = None


class ModificationState(BaseModel):
    Resource: Optional[ModificationResourceEnum] = None
    State: Optional[ModificationStateEnum] = None


class ModificationStateList(RootModel[List[ModificationState]]):
    root: List[ModificationState]


class ModifyCertificateBasedAuthPropertiesRequest(BaseModel):
    CertificateBasedAuthProperties_1: Optional[CertificateBasedAuthProperties] = Field(
        None, alias='CertificateBasedAuthProperties'
    )
    PropertiesToDelete: Optional[DeletableCertificateBasedAuthPropertiesList] = None
    ResourceId: DirectoryId


class ModifyClientPropertiesRequest(BaseModel):
    ClientProperties_1: ClientProperties = Field(..., alias='ClientProperties')
    ResourceId: NonEmptyString


class ModifySelfservicePermissionsRequest(BaseModel):
    ResourceId: DirectoryId
    SelfservicePermissions_1: SelfservicePermissions = Field(
        ..., alias='SelfservicePermissions'
    )


class ModifyWorkspaceAccessPropertiesRequest(BaseModel):
    ResourceId: DirectoryId
    WorkspaceAccessProperties_1: WorkspaceAccessProperties = Field(
        ..., alias='WorkspaceAccessProperties'
    )


class ModifyWorkspaceCreationPropertiesRequest(BaseModel):
    ResourceId: DirectoryId
    WorkspaceCreationProperties_1: WorkspaceCreationProperties = Field(
        ..., alias='WorkspaceCreationProperties'
    )


class ModifyWorkspacePropertiesRequest(BaseModel):
    WorkspaceId_1: WorkspaceId = Field(..., alias='WorkspaceId')
    WorkspaceProperties_1: WorkspaceProperties = Field(..., alias='WorkspaceProperties')


class ModifyWorkspaceStateRequest(BaseModel):
    WorkspaceId_1: WorkspaceId = Field(..., alias='WorkspaceId')
    WorkspaceState: TargetWorkspaceState


class OperatingSystem(BaseModel):
    Type: Optional[OperatingSystemType] = None


class PendingCreateStandbyWorkspacesRequest(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    State: Optional[WorkspaceState] = None
    UserName_1: Optional[UserName] = Field(None, alias='UserName')
    WorkspaceId_1: Optional[WorkspaceId] = Field(None, alias='WorkspaceId')


class PendingCreateStandbyWorkspacesRequestList(
    RootModel[List[PendingCreateStandbyWorkspacesRequest]]
):
    root: List[PendingCreateStandbyWorkspacesRequest]


class RebootRequest(BaseModel):
    WorkspaceId_1: WorkspaceId = Field(..., alias='WorkspaceId')


class RebootWorkspaceRequests(RootModel[List[RebootRequest]]):
    root: List[RebootRequest] = Field(..., max_length=25, min_length=1)


class RebootWorkspacesRequest(BaseModel):
    RebootWorkspaceRequests_1: RebootWorkspaceRequests = Field(
        ..., alias='RebootWorkspaceRequests'
    )


class RebuildRequest(BaseModel):
    WorkspaceId_1: WorkspaceId = Field(..., alias='WorkspaceId')


class RebuildWorkspaceRequests(RootModel[List[RebuildRequest]]):
    root: List[RebuildRequest] = Field(..., max_length=1, min_length=1)


class RebuildWorkspacesRequest(BaseModel):
    RebuildWorkspaceRequests_1: RebuildWorkspaceRequests = Field(
        ..., alias='RebuildWorkspaceRequests'
    )


class RelatedWorkspaceProperties(BaseModel):
    Region_1: Optional[Region] = Field(None, alias='Region')
    State: Optional[WorkspaceState] = None
    Type: Optional[StandbyWorkspaceRelationshipType] = None
    WorkspaceId_1: Optional[WorkspaceId] = Field(None, alias='WorkspaceId')


class RelatedWorkspaces(RootModel[List[RelatedWorkspaceProperties]]):
    root: List[RelatedWorkspaceProperties]


class RestoreWorkspaceRequest(BaseModel):
    WorkspaceId_1: WorkspaceId = Field(..., alias='WorkspaceId')


class RevokeIpRulesRequest(BaseModel):
    GroupId: IpGroupId
    UserRules: IpRevokedRuleList


class SamlProperties(BaseModel):
    RelayStateParameterName: Optional[NonEmptyString] = None
    Status: Optional[SamlStatusEnum] = None
    UserAccessUrl: Optional[SamlUserAccessUrl] = None


class Snapshot(BaseModel):
    SnapshotTime: Optional[Timestamp] = None


class SnapshotList(RootModel[List[Snapshot]]):
    root: List[Snapshot]


class StartRequest(BaseModel):
    WorkspaceId_1: Optional[WorkspaceId] = Field(None, alias='WorkspaceId')


class StartWorkspaceRequests(RootModel[List[StartRequest]]):
    root: List[StartRequest] = Field(..., max_length=25, min_length=1)


class StartWorkspacesRequest(BaseModel):
    StartWorkspaceRequests_1: StartWorkspaceRequests = Field(
        ..., alias='StartWorkspaceRequests'
    )


class StopRequest(BaseModel):
    WorkspaceId_1: Optional[WorkspaceId] = Field(None, alias='WorkspaceId')


class StopWorkspaceRequests(RootModel[List[StopRequest]]):
    root: List[StopRequest] = Field(..., max_length=25, min_length=1)


class StopWorkspacesRequest(BaseModel):
    StopWorkspaceRequests_1: StopWorkspaceRequests = Field(
        ..., alias='StopWorkspaceRequests'
    )


class Tag(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TerminateRequest(BaseModel):
    WorkspaceId_1: WorkspaceId = Field(..., alias='WorkspaceId')


class TerminateWorkspaceRequests(RootModel[List[TerminateRequest]]):
    root: List[TerminateRequest] = Field(..., max_length=25, min_length=1)


class TerminateWorkspacesRequest(BaseModel):
    TerminateWorkspaceRequests_1: TerminateWorkspaceRequests = Field(
        ..., alias='TerminateWorkspaceRequests'
    )


class UpdateWorkspaceBundleRequest(BaseModel):
    BundleId_1: Optional[BundleId] = Field(None, alias='BundleId')
    ImageId: Optional[WorkspaceImageId] = None


class UpdateWorkspaceImagePermissionRequest(BaseModel):
    AllowCopyImage: BooleanObject
    ImageId: WorkspaceImageId
    SharedAccountId: AwsAccount


class Workspace(BaseModel):
    BundleId_1: Optional[BundleId] = Field(None, alias='BundleId')
    ComputerName_1: Optional[ComputerName] = Field(None, alias='ComputerName')
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    ErrorCode: Optional[WorkspaceErrorCode] = None
    ErrorMessage: Optional[Description] = None
    IpAddress_1: Optional[IpAddress] = Field(None, alias='IpAddress')
    ModificationStates: Optional[ModificationStateList] = None
    RelatedWorkspaces_1: Optional[RelatedWorkspaces] = Field(
        None, alias='RelatedWorkspaces'
    )
    RootVolumeEncryptionEnabled: Optional[BooleanObject] = None
    State: Optional[WorkspaceState] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    UserName_1: Optional[UserName] = Field(None, alias='UserName')
    UserVolumeEncryptionEnabled: Optional[BooleanObject] = None
    VolumeEncryptionKey_1: Optional[VolumeEncryptionKey] = Field(
        None, alias='VolumeEncryptionKey'
    )
    WorkspaceId_1: Optional[WorkspaceId] = Field(None, alias='WorkspaceId')
    WorkspaceProperties_1: Optional[WorkspaceProperties] = Field(
        None, alias='WorkspaceProperties'
    )


class WorkspaceBundle(BaseModel):
    BundleId_1: Optional[BundleId] = Field(None, alias='BundleId')
    BundleType_1: Optional[BundleType] = Field(None, alias='BundleType')
    ComputeType_1: Optional[ComputeType] = Field(None, alias='ComputeType')
    CreationTime: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    ImageId: Optional[WorkspaceImageId] = None
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[NonEmptyString] = None
    Owner: Optional[BundleOwner] = None
    RootStorage_1: Optional[RootStorage] = Field(None, alias='RootStorage')
    State: Optional[WorkspaceBundleState] = None
    UserStorage_1: Optional[UserStorage] = Field(None, alias='UserStorage')


class WorkspaceConnectionStatus(BaseModel):
    ConnectionState_1: Optional[ConnectionState] = Field(None, alias='ConnectionState')
    ConnectionStateCheckTimestamp: Optional[Timestamp] = None
    LastKnownUserConnectionTimestamp: Optional[Timestamp] = None
    WorkspaceId_1: Optional[WorkspaceId] = Field(None, alias='WorkspaceId')


class WorkspaceConnectionStatusList(RootModel[List[WorkspaceConnectionStatus]]):
    root: List[WorkspaceConnectionStatus]


class WorkspaceDirectory(BaseModel):
    Alias_1: Optional[Alias] = Field(None, alias='Alias')
    CertificateBasedAuthProperties_1: Optional[CertificateBasedAuthProperties] = Field(
        None, alias='CertificateBasedAuthProperties'
    )
    CustomerUserName: Optional[UserName] = None
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    DirectoryName_1: Optional[DirectoryName] = Field(None, alias='DirectoryName')
    DirectoryType: Optional[WorkspaceDirectoryType] = None
    DnsIpAddresses_1: Optional[DnsIpAddresses] = Field(None, alias='DnsIpAddresses')
    IamRoleId: Optional[ARN] = None
    RegistrationCode_1: Optional[RegistrationCode] = Field(
        None, alias='RegistrationCode'
    )
    SamlProperties_1: Optional[SamlProperties] = Field(None, alias='SamlProperties')
    SelfservicePermissions_1: Optional[SelfservicePermissions] = Field(
        None, alias='SelfservicePermissions'
    )
    State: Optional[WorkspaceDirectoryState] = None
    SubnetIds_1: Optional[SubnetIds] = Field(None, alias='SubnetIds')
    Tenancy_1: Optional[Tenancy] = Field(None, alias='Tenancy')
    WorkspaceAccessProperties_1: Optional[WorkspaceAccessProperties] = Field(
        None, alias='WorkspaceAccessProperties'
    )
    WorkspaceCreationProperties: Optional[DefaultWorkspaceCreationProperties] = None
    WorkspaceSecurityGroupId: Optional[SecurityGroupId] = None
    ipGroupIds: Optional[IpGroupIdList] = None


class WorkspaceImage(BaseModel):
    Created: Optional[Timestamp] = None
    Description: Optional[WorkspaceImageDescription] = None
    ErrorCode: Optional[WorkspaceImageErrorCode] = None
    ErrorMessage: Optional[Description] = None
    ImageId: Optional[WorkspaceImageId] = None
    Name: Optional[WorkspaceImageName] = None
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    OwnerAccountId: Optional[AwsAccount] = None
    RequiredTenancy: Optional[WorkspaceImageRequiredTenancy] = None
    State: Optional[WorkspaceImageState] = None
    Updates: Optional[UpdateResult] = None


class WorkspaceImageList(RootModel[List[WorkspaceImage]]):
    root: List[WorkspaceImage]


class WorkspaceList(RootModel[List[Workspace]]):
    root: List[Workspace]


class WorkspaceRequest(BaseModel):
    BundleId_1: BundleId = Field(..., alias='BundleId')
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    RootVolumeEncryptionEnabled: Optional[BooleanObject] = None
    Tags: Optional[TagList] = None
    UserName_1: UserName = Field(..., alias='UserName')
    UserVolumeEncryptionEnabled: Optional[BooleanObject] = None
    VolumeEncryptionKey_1: Optional[VolumeEncryptionKey] = Field(
        None, alias='VolumeEncryptionKey'
    )
    WorkspaceProperties_1: Optional[WorkspaceProperties] = Field(
        None, alias='WorkspaceProperties'
    )


class WorkspaceRequestList(RootModel[List[WorkspaceRequest]]):
    root: List[WorkspaceRequest] = Field(..., max_length=25, min_length=1)


class BundleList(RootModel[List[WorkspaceBundle]]):
    root: List[WorkspaceBundle]


class ClientPropertiesList(RootModel[List[ClientPropertiesResult]]):
    root: List[ClientPropertiesResult]


class ConnectionAlias(BaseModel):
    AliasId: Optional[ConnectionAliasId] = None
    Associations: Optional[ConnectionAliasAssociationList] = None
    ConnectionString_1: Optional[ConnectionString] = Field(
        None, alias='ConnectionString'
    )
    OwnerAccountId: Optional[AwsAccount] = None
    State: Optional[ConnectionAliasState] = None


class ConnectionAliasList(RootModel[List[ConnectionAlias]]):
    root: List[ConnectionAlias] = Field(..., max_length=25, min_length=1)


class CopyWorkspaceImageRequest(BaseModel):
    Description: Optional[WorkspaceImageDescription] = None
    Name: WorkspaceImageName
    SourceImageId: WorkspaceImageId
    SourceRegion: Region
    Tags: Optional[TagList] = None


class CreateConnectionAliasRequest(BaseModel):
    ConnectionString_1: ConnectionString = Field(..., alias='ConnectionString')
    Tags: Optional[TagList] = None


class CreateIpGroupRequest(BaseModel):
    GroupDesc: Optional[IpGroupDesc] = None
    GroupName: IpGroupName
    Tags: Optional[TagList] = None
    UserRules: Optional[IpRuleList] = None


class CreateTagsRequest(BaseModel):
    ResourceId: NonEmptyString
    Tags: TagList


class CreateUpdatedWorkspaceImageRequest(BaseModel):
    Description: WorkspaceImageDescription
    Name: WorkspaceImageName
    SourceImageId: WorkspaceImageId
    Tags: Optional[TagList] = None


class CreateWorkspaceBundleRequest(BaseModel):
    BundleDescription: WorkspaceBundleDescription
    BundleName: WorkspaceBundleName
    ComputeType_1: ComputeType = Field(..., alias='ComputeType')
    ImageId: WorkspaceImageId
    RootStorage_1: Optional[RootStorage] = Field(None, alias='RootStorage')
    Tags: Optional[TagList] = None
    UserStorage_1: UserStorage = Field(..., alias='UserStorage')


class CreateWorkspaceBundleResult(BaseModel):
    WorkspaceBundle_1: Optional[WorkspaceBundle] = Field(None, alias='WorkspaceBundle')


class CreateWorkspaceImageRequest(BaseModel):
    Description: WorkspaceImageDescription
    Name: WorkspaceImageName
    Tags: Optional[TagList] = None
    WorkspaceId_1: WorkspaceId = Field(..., alias='WorkspaceId')


class CreateWorkspaceImageResult(BaseModel):
    Created: Optional[Timestamp] = None
    Description: Optional[WorkspaceImageDescription] = None
    ImageId: Optional[WorkspaceImageId] = None
    Name: Optional[WorkspaceImageName] = None
    OperatingSystem_1: Optional[OperatingSystem] = Field(None, alias='OperatingSystem')
    OwnerAccountId: Optional[AwsAccount] = None
    RequiredTenancy: Optional[WorkspaceImageRequiredTenancy] = None
    State: Optional[WorkspaceImageState] = None


class CreateWorkspacesRequest(BaseModel):
    Workspaces: WorkspaceRequestList


class DescribeClientBrandingResult(BaseModel):
    DeviceTypeAndroid: Optional[DefaultClientBrandingAttributes] = None
    DeviceTypeIos: Optional[IosClientBrandingAttributes] = None
    DeviceTypeLinux: Optional[DefaultClientBrandingAttributes] = None
    DeviceTypeOsx: Optional[DefaultClientBrandingAttributes] = None
    DeviceTypeWeb: Optional[DefaultClientBrandingAttributes] = None
    DeviceTypeWindows: Optional[DefaultClientBrandingAttributes] = None


class DescribeClientPropertiesResult(BaseModel):
    ClientPropertiesList_1: Optional[ClientPropertiesList] = Field(
        None, alias='ClientPropertiesList'
    )


class DescribeConnectionAliasesResult(BaseModel):
    ConnectionAliases: Optional[ConnectionAliasList] = None
    NextToken: Optional[PaginationToken] = None


class DescribeTagsResult(BaseModel):
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class DescribeWorkspaceBundlesResult(BaseModel):
    Bundles: Optional[BundleList] = None
    NextToken: Optional[PaginationToken] = None


class DescribeWorkspaceImagesResult(BaseModel):
    Images: Optional[WorkspaceImageList] = None
    NextToken: Optional[PaginationToken] = None


class DescribeWorkspaceSnapshotsResult(BaseModel):
    RebuildSnapshots: Optional[SnapshotList] = None
    RestoreSnapshots: Optional[SnapshotList] = None


class DescribeWorkspacesConnectionStatusResult(BaseModel):
    NextToken: Optional[PaginationToken] = None
    WorkspacesConnectionStatus: Optional[WorkspaceConnectionStatusList] = None


class DescribeWorkspacesResult(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Workspaces: Optional[WorkspaceList] = None


class DirectoryList(RootModel[List[WorkspaceDirectory]]):
    root: List[WorkspaceDirectory]


class FailedCreateWorkspaceRequest(BaseModel):
    ErrorCode: Optional[ErrorType] = None
    ErrorMessage: Optional[Description] = None
    WorkspaceRequest_1: Optional[WorkspaceRequest] = Field(
        None, alias='WorkspaceRequest'
    )


class FailedCreateWorkspaceRequests(RootModel[List[FailedCreateWorkspaceRequest]]):
    root: List[FailedCreateWorkspaceRequest]


class FailedRebootWorkspaceRequests(RootModel[List[FailedWorkspaceChangeRequest]]):
    root: List[FailedWorkspaceChangeRequest]


class FailedRebuildWorkspaceRequests(RootModel[List[FailedWorkspaceChangeRequest]]):
    root: List[FailedWorkspaceChangeRequest]


class FailedStartWorkspaceRequests(RootModel[List[FailedWorkspaceChangeRequest]]):
    root: List[FailedWorkspaceChangeRequest]


class FailedStopWorkspaceRequests(RootModel[List[FailedWorkspaceChangeRequest]]):
    root: List[FailedWorkspaceChangeRequest]


class FailedTerminateWorkspaceRequests(RootModel[List[FailedWorkspaceChangeRequest]]):
    root: List[FailedWorkspaceChangeRequest]


class ImportClientBrandingRequest(BaseModel):
    DeviceTypeAndroid: Optional[DefaultImportClientBrandingAttributes] = None
    DeviceTypeIos: Optional[IosImportClientBrandingAttributes] = None
    DeviceTypeLinux: Optional[DefaultImportClientBrandingAttributes] = None
    DeviceTypeOsx: Optional[DefaultImportClientBrandingAttributes] = None
    DeviceTypeWeb: Optional[DefaultImportClientBrandingAttributes] = None
    DeviceTypeWindows: Optional[DefaultImportClientBrandingAttributes] = None
    ResourceId: DirectoryId


class ImportClientBrandingResult(BaseModel):
    DeviceTypeAndroid: Optional[DefaultClientBrandingAttributes] = None
    DeviceTypeIos: Optional[IosClientBrandingAttributes] = None
    DeviceTypeLinux: Optional[DefaultClientBrandingAttributes] = None
    DeviceTypeOsx: Optional[DefaultClientBrandingAttributes] = None
    DeviceTypeWeb: Optional[DefaultClientBrandingAttributes] = None
    DeviceTypeWindows: Optional[DefaultClientBrandingAttributes] = None


class ImportWorkspaceImageRequest(BaseModel):
    Applications: Optional[ApplicationList] = None
    Ec2ImageId_1: Ec2ImageId = Field(..., alias='Ec2ImageId')
    ImageDescription: WorkspaceImageDescription
    ImageName: WorkspaceImageName
    IngestionProcess: WorkspaceImageIngestionProcess
    Tags: Optional[TagList] = None


class ModifySamlPropertiesRequest(BaseModel):
    PropertiesToDelete: Optional[DeletableSamlPropertiesList] = None
    ResourceId: DirectoryId
    SamlProperties_1: Optional[SamlProperties] = Field(None, alias='SamlProperties')


class RebootWorkspacesResult(BaseModel):
    FailedRequests: Optional[FailedRebootWorkspaceRequests] = None


class RebuildWorkspacesResult(BaseModel):
    FailedRequests: Optional[FailedRebuildWorkspaceRequests] = None


class RegisterWorkspaceDirectoryRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    EnableSelfService: Optional[BooleanObject] = None
    EnableWorkDocs: BooleanObject
    SubnetIds_1: Optional[SubnetIds] = Field(None, alias='SubnetIds')
    Tags: Optional[TagList] = None
    Tenancy_1: Optional[Tenancy] = Field(None, alias='Tenancy')


class StandbyWorkspace(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    PrimaryWorkspaceId: WorkspaceId
    Tags: Optional[TagList] = None
    VolumeEncryptionKey_1: Optional[VolumeEncryptionKey] = Field(
        None, alias='VolumeEncryptionKey'
    )


class StandbyWorkspacesList(RootModel[List[StandbyWorkspace]]):
    root: List[StandbyWorkspace]


class StartWorkspacesResult(BaseModel):
    FailedRequests: Optional[FailedStartWorkspaceRequests] = None


class StopWorkspacesResult(BaseModel):
    FailedRequests: Optional[FailedStopWorkspaceRequests] = None


class TerminateWorkspacesResult(BaseModel):
    FailedRequests: Optional[FailedTerminateWorkspaceRequests] = None


class CreateStandbyWorkspacesRequest(BaseModel):
    PrimaryRegion: Region
    StandbyWorkspaces: StandbyWorkspacesList


class CreateWorkspacesResult(BaseModel):
    FailedRequests: Optional[FailedCreateWorkspaceRequests] = None
    PendingRequests: Optional[WorkspaceList] = None


class DescribeWorkspaceDirectoriesResult(BaseModel):
    Directories: Optional[DirectoryList] = None
    NextToken: Optional[PaginationToken] = None


class FailedCreateStandbyWorkspacesRequest(BaseModel):
    ErrorCode: Optional[WorkspaceErrorCode] = None
    ErrorMessage: Optional[Description] = None
    StandbyWorkspaceRequest: Optional[StandbyWorkspace] = None


class FailedCreateStandbyWorkspacesRequestList(
    RootModel[List[FailedCreateStandbyWorkspacesRequest]]
):
    root: List[FailedCreateStandbyWorkspacesRequest]


class CreateStandbyWorkspacesResult(BaseModel):
    FailedStandbyRequests: Optional[FailedCreateStandbyWorkspacesRequestList] = None
    PendingStandbyRequests: Optional[PendingCreateStandbyWorkspacesRequestList] = None
